variables:
  DOCKER_HOST: tcp://docker:2375
  X86_DOCKER_IMAGE: conanio/gcc8
  X86_64_DOCKER_IMAGE: conanio/gcc8
  ARMV7_DOCKER_IMAGE: conanio/gcc8-armv7
  X86_CONAN_PROFILE: profiles/x86
  X86_64_CONAN_PROFILE: profiles/x86_64
  ARMV7_CONAN_PROFILE: profiles/armv7
  ARMV7_RUNTIME_DOCKER_IMAGE: arm32v7/debian
  GOOGLE_TEST_FOLDER_PATH: build/test/bin
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

.build:
  image: conanio/gcc8
  #tags:
  #  - kubernetes
  stage: build
  script:
    - sudo chmod +x *.sh
    - ./build.sh $CONAN_PROFILE
  artifacts:
    paths:
      - build

.coverage:
  image: $X86_64_DOCKER_IMAGE
  #tags:
  #  - kubernetes
  stage: build
  variables:
    CONAN_PROFILE: $X86_64_CONAN_PROFILE
    ENABLE_COVERAGE: 1
  cache: 
    policy: push
    key: "${CI_COMMIT_SHORT_SHA}"
    paths: 
      - build/sonar-coverage.xml
  script:
    - pip install gcovr
    - sudo chmod +x *.sh
    - ./build.sh $CONAN_PROFILE
  artifacts:
    reports:
      cobertura: build/cobertura-coverage.xml
    #paths:
    #  - build/coverage/

.pages:
  stage: publish
  dependencies:
    - coverage
  script:
    - mv build/coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  #only:
  #  - master

.test:
  image: conanio/gcc8
  #tags:
  #  - gitlab-org
  stage: test
  script:
    - cd $GOOGLE_TEST_FOLDER_PATH && ./GoogleTests --gtest_output=xml:report.xml
  artifacts:
    reports:
      junit: $GOOGLE_TEST_FOLDER_PATH/report.xml

stages:
  - before
  - build
  - publish
  - test
  - deploy

#windows:
  #stage: before
  #image: arm64v8/ubuntu
  #image: ubuntu
  #image: servercore:ltsc2019
  #tags:
  #- windows
  #tags:
  #  - kubernetes
  #script:
  #  - Get-ComputerInfo

# docker-compose:
#   stage: before
#   image: docker:stable
#   tags:
#     - docker
#   services:
#   - docker:dind
#   script:
#     - docker info
#     - docker-compose up -d
#     - docker ps

coverage:
  extends: .coverage

#pages:
#  extends: .pages
  
x64:build:
  extends: .build
  variables:
    CONAN_PROFILE: $X86_64_CONAN_PROFILE 
  image: $X86_64_DOCKER_IMAGE
  

x64:test:
  extends: .test 
  needs: ["x64:build"]
  dependencies:
    - x64:build
  image: $X86_64_DOCKER_IMAGE

armv7:build:
  extends: .build
  variables:
    CONAN_PROFILE: $ARMV7_CONAN_PROFILE  
  image: $ARMV7_DOCKER_IMAGE

get-sonar-binaries: 
  stage: .pre
  cache: 
    policy: push
    key: "${CI_COMMIT_SHORT_SHA}"
    paths: 
      - build-wrapper/
      - sonar-scanner/
  script: 
    # Download sonar-scanner
    - curl -sSLo ./sonar-scanner.zip 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip'
    - unzip -o sonar-scanner.zip
    - mv sonar-scanner-4.2.0.1873-linux sonar-scanner
    # Download build-wrapper
    - curl -sSLo ./build-wrapper-linux-x86.zip "${SONAR_HOST_URL}/static/cpp/build-wrapper-linux-x86.zip"
    - unzip -oj build-wrapper-linux-x86.zip -d ./build-wrapper

sonar:
  image: $X86_64_DOCKER_IMAGE
  stage: build
  cache: 
    policy: pull-push
    key: "${CI_COMMIT_SHORT_SHA}"
    paths: 
      - build-wrapper/
      - sonar-scanner/
      - bw-output/
  script: 
    # Run the build inside the build wrapper
    - sudo chmod +x *.sh
    - build-wrapper/build-wrapper-linux-x86-64 --out-dir bw-output ./build.sh
      
sonarcloud-check: 
  stage: .post
  cache: 
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths: 
      - build-wrapper/
      - sonar-scanner/
      - bw-output/
      - build/sonar-coverage.xml
  script: 
    - sonar-scanner/bin/sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}" -Dsonar.cfamily.build-wrapper-output=bw-output -Dsonar.coverageReportPaths=build/sonar-coverage.xml

# armv7:test:
#   extends: .test
#   needs: ["armv7:build"]
#   dependencies:
#     - armv7:build
#   image: $ARMV7_RUNTIME_DOCKER_IMAGE
  
